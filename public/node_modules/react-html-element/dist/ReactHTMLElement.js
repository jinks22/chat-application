"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_dom_1 = __importDefault(require("react-dom"));
var ReactHTMLElement = /** @class */ (function (_super) {
    __extends(ReactHTMLElement, _super);
    function ReactHTMLElement(template, mountSelector) {
        if (template === void 0) { template = '<div></div>'; }
        if (mountSelector === void 0) { mountSelector = 'div'; }
        var _this = _super.call(this) || this;
        _this.template = template;
        _this.mountSelector = mountSelector;
        return _this;
    }
    ReactHTMLElement.prototype.getShadowRoot = function () {
        return this.shadowRoot || this.attachShadow({ mode: 'open' });
    };
    Object.defineProperty(ReactHTMLElement.prototype, "shadow", {
        get: function () {
            if (this._initialized)
                return this.getShadowRoot();
            var shadow = this.getShadowRoot();
            shadow.innerHTML = this.template;
            this._initialized = true;
            return shadow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReactHTMLElement.prototype, "mountPoint", {
        get: function () {
            if (this._mountPoint)
                return this._mountPoint;
            this._mountPoint = this.shadow.querySelector(this.mountSelector);
            return this._mountPoint;
        },
        set: function (mount) {
            this._mountPoint = mount;
        },
        enumerable: false,
        configurable: true
    });
    ReactHTMLElement.prototype.render = function (app) {
        if (!this.isConnected)
            return;
        react_dom_1.default.render(app, this.mountPoint);
    };
    ReactHTMLElement.prototype.disconnectedCallback = function () {
        if (!this._mountPoint)
            return;
        react_dom_1.default.unmountComponentAtNode(this._mountPoint);
    };
    return ReactHTMLElement;
}(HTMLElement));
exports.default = ReactHTMLElement;
